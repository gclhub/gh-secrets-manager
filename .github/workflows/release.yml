name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/gh-secrets-manager
    steps:
      - uses: actions/checkout@v3
        with:
          path: gh-secrets-manager

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Install dependencies
        run: go mod download

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags="-X gh-secrets-manager/pkg/version.Version=$VERSION -X gh-secrets-manager/pkg/version.CommitHash=$COMMIT_HASH" -o dist/gh-secrets-manager_linux_amd64/bin/gh-secrets-manager ./cmd/gh-secrets-manager
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X gh-secrets-manager/pkg/version.Version=$VERSION -X gh-secrets-manager/pkg/version.CommitHash=$COMMIT_HASH" -o dist/gh-secrets-manager_darwin_amd64/bin/gh-secrets-manager ./cmd/gh-secrets-manager
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X gh-secrets-manager/pkg/version.Version=$VERSION -X gh-secrets-manager/pkg/version.CommitHash=$COMMIT_HASH" -o dist/gh-secrets-manager_darwin_arm64/bin/gh-secrets-manager ./cmd/gh-secrets-manager
          GOOS=windows GOARCH=amd64 go build -ldflags="-X gh-secrets-manager/pkg/version.Version=$VERSION -X gh-secrets-manager/pkg/version.CommitHash=$COMMIT_HASH" -o dist/gh-secrets-manager_windows_amd64/bin/gh-secrets-manager.exe ./cmd/gh-secrets-manager

      - name: Package
        run: |
          for dir in dist/*/; do
            cp README.md "$dir"
            cp LICENSE "$dir" || true
            (cd "$dir" && zip -r "../${dir%/}.zip" .)
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true